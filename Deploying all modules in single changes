name: Tower-Watch CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  sanity-check:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      # Frontend Analysis
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.9.0'

      - name: Install frontend dependencies
        run: npm install
        working-directory: ./frontend

      - name: Install dependencies
        run: npm ci
        working-directory: ./frontend

      - name: Run ESLint
        run: npx eslint . || true
        working-directory: ./frontend

      - name: Run prettier
        run: npx prettier --check . || true
        working-directory: ./frontend

      - name: Run npm audit
        run: npm audit --audit-level=moderate . || true
        working-directory: ./frontend

      - name: Install Retire.js
        run: npm install -g retire
        working-directory: ./frontend

      - name: Run Retire.js
        run: retire . || true
        working-directory: ./frontend

      - name: Run frontend tests
        run: npm test -- --coverage --watchAll=false || true
        working-directory: ./frontend

      # Backend Analysis
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.12'

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r dev-requirements.txt

      - name: Run pylint
        run: pylint . --ignore=sample_data_pub,unit_test || true

      - name: Run Bandit Security Scan
        run: bandit -r . --exclude=sample_data_pub,unit_test || true

      - name: Run backend tests
        run: |
          pytest --cov=heimdall --cov=mqtt --cov=jarvis --cov=mysql_ingestor --cov=influx_dbingestor --cov=patrol --cov-report=term-missing || true

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: sanity-check
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      # Step 2: Install Docker Compose
      - name: Install Docker Compose
        run: |
          DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r '.tag_name')
          sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
          
      # Docker Image Build
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Build Images with Docker Compose
      - name: Build Docker Images
        run: |
          docker-compose -f docker-compose.yml build

      # Step 4: Tag and Push Images
      - name: Tag and Push Images
        run: |
          # List of services to push
          REPO_NAME=${{ secrets.DOCKER_USERNAME }}/towerwatch
          SERVICES=("ingestor" "influx" "mqtt" "etl" "heimdall") # Replace with your actual services
          
          for SERVICE in "${SERVICES[@]}"; do
          SOURCE_IMAGE=${SERVICE}:latest
          TARGET_IMAGE=${REPO_NAME}-${SERVICE}:${{ github.sha }}

          # Tag and push the specific image
          docker tag ${SOURCE_IMAGE} ${TARGET_IMAGE}
          docker push ${TARGET_IMAGE}

          # Tag and push the latest image
         # docker tag ${TARGET_IMAGE} ${REPO_NAME}-${SERVICE}:latest
         # docker push ${REPO_NAME}-${SERVICE}:latest
          #done


      # Kubernetes Deployment
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Authenticate to Kubernetes cluster
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 --decode > $HOME/.kube/config
          cat $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f ./k8s/deployment.yaml
          kubectl rollout status deployment/TowerWatch
